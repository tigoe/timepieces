%!PS-Adobe-2.0 EPSF-1.2%%Creator: Vectorworks 2018 SP3 [23.0.3(418943)] (64-Bit app)%%Title: Hourglass003.eps%%CreationDate: 5/30/2018%%DocumentProcSets: Adobe_packedarray 1.0 0%%DocumentSuppliedProcSets: Adobe_packedarray 1.0 0%%DocumentProcSets: Adobe_cmykcolor 1.1 0%%DocumentSuppliedProcSets: Adobe_cmykcolor 1.1 0%%DocumentProcSets: Adobe_cshow 1.1 0%%DocumentSuppliedProcSets: Adobe_cshow 1.1 0%%DocumentProcSets: Adobe_customcolor 1.0 0%%DocumentSuppliedProcSets: Adobe_customcolor 1.0 0%%DocumentProcSets: Adobe_pattern 1.9 0%%DocumentSuppliedProcSets: Adobe_pattern 1.9 0%%DocumentProcSets: Adobe_Illustrator88 1.19 0%%DocumentSuppliedProcSets: Adobe_Illustrator88 1.19 0%%BoundingBox:0 0 2060 3163%%TemplateBox:306 396 306 396%%DocumentPreview: Header%%EndComments%%BeginProlog%%BeginProcSet: Adobe_packedarray 1.0 0userdict /Adobe_packedarray 5 dict dup begin put/initialize{/packedarray where	{	pop	}	{	Adobe_packedarray begin	Adobe_packedarray		{		dup xcheck			{			bind			} if		userdict 3 1 roll put		} forall end	} ifelse} def/terminate{} def/packedarray{array astore readonly} def/setpacking{pop} def/currentpacking{false} defcurrentdict readonly pop end%%EndProcSetAdobe_packedarray /initialize get exec%%BeginProcSet: Adobe_cmykcolor 1.1 0currentpacking true setpackinguserdict /Adobe_cmykcolor 4 dict dup begin put/initialize{/setcmykcolor where	{	pop	}	{	userdict /Adobe_cmykcolor_vars 2 dict dup begin put	/_setrgbcolor		/setrgbcolor load def	/_currentrgbcolor		/currentrgbcolor load def	Adobe_cmykcolor begin	Adobe_cmykcolor		{		dup xcheck			{			bind			} if		pop pop		} forall end end	Adobe_cmykcolor begin	} ifelse} def/terminate{currentdict Adobe_cmykcolor eq	{ end	} if} def/setcmykcolor{1 sub 4 1 roll3	{	3 index add neg dup 0 lt		{		pop 0		} if	3 1 roll	} repeatAdobe_cmykcolor_vars /_setrgbcolor get execpop} def /currentcmykcolor{Adobe_cmykcolor_vars /_currentrgbcolor get exec3	{	1 sub neg 3 1 roll	} repeat0} defcurrentdict readonly pop endsetpacking%%EndProcSet%%BeginProcSet: Adobe_cshow 1.1 0currentpacking true setpackinguserdict /Adobe_cshow 3 dict dup begin put/initialize{/cshow where	{	pop	}	{	userdict /Adobe_cshow_vars 1 dict dup begin put	/_cshow		{} def	Adobe_cshow begin	Adobe_cshow		{		dup xcheck			{			bind			} if		userdict 3 1 roll put		} forall end end	} ifelse} def/terminate{} def/cshow{exchAdobe_cshow_vars	exch /_cshow	exch put	{	0 0 Adobe_cshow_vars /_cshow get exec	} forall} defcurrentdict readonly pop endsetpacking%%EndProcSet%%BeginProcSet: Adobe_customcolor 1.0 0currentpacking true setpackinguserdict /Adobe_customcolor 5 dict dup begin put/initialize{/setcustomcolor where	{	pop	}	{	Adobe_customcolor begin	Adobe_customcolor		{		dup xcheck			{			bind			} if		pop pop		} forall end	Adobe_customcolor begin	} ifelse} def/terminate{currentdict Adobe_customcolor eq	{ end	} if} def/findcmykcustomcolor{5 packedarray}  def/setcustomcolor{exchaload pop pop4	{	4 index mul 4 1 roll	} repeat5 -1 roll popsetcmykcolor} def/setoverprint{pop} defcurrentdict readonly pop endsetpacking%%EndProcSet%%BeginProcSet: Adobe_pattern 1.9 0currentpacking true setpackinguserdict /Adobe_pattern 14 dict dup begin put/initialize{/definepattern where	{	pop	}	{	Adobe_pattern begin	Adobe_pattern		{		dup xcheck			{			bind			} if		pop pop		} forall	mark	cachestatus 7 1 roll pop pop pop pop exch pop exch		{		{		10000 add		dup 2 index gt			{			break			} if		dup setcachelimit		} loop		} stopped	cleartomark	} ifelse} def/terminate{currentdict Adobe_pattern eq	{ end	} if} deferrordict/nocurrentpoint{popstop} puterrordict/invalidaccess{popstop} put/patternencoding256 array def0 1 255{patternencoding exch ( ) 2 copy exch 0 exch put cvn put} for/definepattern{17 dict begin/uniform exch def/cache exch def/key exch def/procarray exch def/mtx exch matrix invertmatrix def/height exch def/width exch def/ctm matrix currentmatrix def/ptm matrix def/str 32 string def/slice 9 dict defslice /s 1 putslice /q 256 procarray length div sqrt floor cvi putslice /b 0 put/FontBBox [0 0 0 0] def/FontMatrix mtx matrix copy def/Encoding patternencoding def/FontType 3 def/BuildChar	{	exch begin	slice begin	dup q dup mul mod s idiv /i exch def	dup q dup mul mod s mod /j exch def	q dup mul idiv procarray exch get	/xl j width s div mul def	/xg j 1 add width s div mul def	/yl i height s div mul def	/yg i 1 add height s div mul def	uniform		{		1 1		}		{		width 0 dtransform		dup mul exch dup mul add sqrt dup 1 add exch div		0 height dtransform		dup mul exch dup mul add sqrt dup 1 add exch div		} ifelse	width 0 cache		{		xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul		setcachedevice		}		{		setcharwidth		} ifelse	gsave	scale	newpath	xl yl moveto	xg yl lineto	xg yg lineto	xl yg lineto	closepath	clip	newpath end end	exec	grestore	} defkey currentdict definefontend} def/patterncachesize{gsavenewpath0 0 movetowidth 0 linetowidth height lineto0 height linetoclosepathpatternmatrix setmatrixpathbboxexch ceiling 4 -1 roll floor sub 3 1 rollceiling exch floor submul 1 addgrestore} def/patterncachelimit{cachestatus 7 1 roll pop pop pop pop pop pop 8 mul} def/patternpath{exch dup begin setfontctm setmatrixconcatslice exch /b exch slice /q get dup mul mul putFontMatrix concatuniform	{	width 0 dtransform round width div exch round width div exch	0 height dtransform round height div exch height div exch	0 0 transform round exch round exch	ptm astore setmatrix	}	{	ptm currentmatrix pop	} ifelse{currentpoint} stopped not	{	pop pop	pathbbox	true	4 index 3 index eq	4 index 3 index eq	and		{		pop false			{			{pop pop}			{pop pop pop true}			{pop pop pop pop pop pop pop true}			{pop true}			pathforall			} stopped			{			pop pop pop pop pop true			} if		} if		{		height div ceiling height mul 4 1 roll		width div ceiling width mul 4 1 roll		height div floor height mul 4 1 roll		width div floor width mul 4 1 roll		2 index sub height div ceiling cvi exch		3 index sub width div ceiling cvi exch		4 2 roll moveto		FontMatrix mtx invertmatrix		dup dup 4 get exch 5 get rmoveto		ptm ptm concatmatrix pop		slice /s		patterncachesize patterncachelimit div ceiling sqrt ceiling cvi		dup slice /q get gt			{			pop slice /q get			} if		put		0 1 slice /s get dup mul 1 sub			{			slice /b get add			gsave			0 1 str length 1 sub				{				str exch 2 index put				} for			pop			dup				{				gsave				ptm setmatrix				1 index str length idiv {str show} repeat				1 index str length mod str exch 0 exch getinterval show				grestore				0 height rmoveto				} repeat			grestore			} for		pop pop		}		{		pop pop pop pop		} ifelse	} ifend} def/patternclip{clip} def/patternstrokepath{strokepath} def/patternmatrixmatrix def/patternfill{dup type /dicttype eq	{	Adobe_pattern /patternmatrix get	} ifgsavepatternclipAdobe_pattern /patternpath get execgrestorenewpath} def/patternstroke{dup type /dicttype eq	{	Adobe_pattern /patternmatrix get	} ifgsavepatternstrokepathtrue	{		{			{			newpath 			moveto			}			{			lineto			}			{			curveto			}			{			closepath			3 copy			Adobe_pattern /patternfill get exec			} pathforall		pop pop	pop		} stopped			{			pop pop pop pop pop			patternclip			Adobe_pattern /patternfill get exec			} if	}	{	patternclip	Adobe_pattern /patternfill get exec	} ifelsegrestorenewpath} def/patternashow{3 index type /dicttype eq	{	Adobe_pattern /patternmatrix get 4 1 roll	} if	{	pop pop (0) exch	2 copy 0 exch put pop	gsave	false charpath	currentpoint	6 index 6 index 6 index	Adobe_pattern /patternfill get exec	grestore	newpath moveto	2 copy rmoveto	} exch cshowpop pop pop pop pop} def/patternashowstroke{4 index type /dicttype eq	{	patternmatrix /patternmatrix get 5 1 roll	} if4 1 roll	{	pop pop (0) exch	2 copy 0 exch put pop	gsave	false charpath	currentpoint	4 index setmatrix	7 index 7 index 7 index	Adobe_pattern /patternstroke get exec	grestore	newpath moveto	2 copy rmoveto	} exch cshowpop pop pop pop pop pop} defcurrentdict readonly pop endsetpacking%%EndProcSet%%BeginProcSet: Adobe_Illustrator88 1.19 0currentpacking true setpackinguserdict /Adobe_Illustrator88 73 dict dup begin put/initialize{userdict /Adobe_Illustrator88_vars 31 dict dup begin put/_lp /none def/_pf {} def/_ps {} def/_psf {} def/_pss {} def/_a null def/_as null def/_tt 2 array def/_tl 2 array def/_tm matrix def/t {} def/_gf null def/_cf 4 array def/_if null def/_of false def/_fc {} def/_gs null def/_cs 4 array def/_is null def/_os false def/_sc {} def/_pd 1 dict def/_ed 15 dict def/_pm matrix def/_fm null def/_fd null def/_fdd null def/_sm null def/_sd null def/_sdd null def/_i null defAdobe_Illustrator88 beginAdobe_Illustrator88 dup /nc get begin	{	dup xcheck		{		bind		} if	pop pop	} forallendendendAdobe_Illustrator88 beginAdobe_Illustrator88_vars beginnewpath} def/terminate{endend} def/_null def/ddef{Adobe_Illustrator88_vars 3 1 roll put} def/xput{dup load dup length exch maxlength eq	{	dup dup load dup	length 2 mul dict copy def	} ifload begin def end} def/npop{	{	pop	} repeat} def/sw{stringwidthexch 5 -1 roll 3 index 1 sub mul add4 1 roll 3 1 roll 1 sub mul add} def/ss{3 -1 roll pop4 1 roll	{	2 npop (0) exch	2 copy 0 exch put pop	gsave	false charpath	currentpoint	4 index setmatrix	stroke	grestore	moveto	2 copy rmoveto	} exch cshow3 npop} def/sp{exch pop	{	2 npop (0) exch	2 copy 0 exch put pop	false charpath	2 copy rmoveto	} exch cshow2 npop} def/pl{transform0.25 sub round 0.25 add exch0.25 sub round 0.25 add exchitransform} def/setstrokeadjust where{pop true setstrokeadjust/c{curveto} def/C/c load def/v{currentpoint 6 2 roll curveto} def/V/v load def/y{2 copy curveto} def/Y/y load def/l{lineto} def/L/l load def/m{moveto} def}{/c{pl curveto} def/C/c load def/v{currentpoint 6 2 roll pl curveto} def/V/v load def/y{pl 2 copy curveto} def/Y/y load def/l{pl lineto} def/L/l load def/m{pl moveto} def} ifelse/d{setdash} def/cfcurrentflat def/i{dup 0 eq	{	pop cf	} ifsetflat} def/j{setlinejoin} def/J{setlinecap} def/M{setmiterlimit} def/w{setlinewidth} def/H{} def/h{closepath} def/N{newpath} def/n/N load def/F{_pf} def/f{closepathF} def/S{_ps} def/s{closepathS} def/B{gsave F grestoreS} def/b{closepathB} def/W{clip} def/ta{_as moveto_tt aload pop 4 -2 roll} def/tl{_tl aload pop translate} def/as{{0 0}{2 copy _tt aload pop 4 -2 roll swexch neg 2 div exch neg 2 div}{2 copy _tt aload pop 4 -2 roll swexch neg exch neg}{0 0}} cvlit def/z{/_a exch ddef/_as as _a get ddef_a 2 le	{	0 _tt astore pop	0 exch neg _tl astore pop	}	{	0 exch neg _tt astore pop	neg 0 _tl astore pop	} ifelseexch findfont exch scalefont setfont} def/tm{_tm currentmatrix popconcat} def/I{tm/t	{	ta sp	tl	} ddef} def/o{tm/t	{	ta 4 npop	tl	newpath	} ddef} def/e{tm/t	{	ta _psf	tl	newpath	} ddef} def/r{tm/t	{	ta _tm _pss	tl	newpath	} ddef} def/a{tm/t	{	2 copy	ta _psf	newpath	ta _tm _pss	tl	newpath	} ddef} def/T{_tm setmatrix} def/Z{popfindfont begincurrentdict dup length 1 add dict begin	{	1 index /FID ne		{		def		}		{		2 npop		} ifelse	} forall/FontName exch def dup length 0 ne	{	/Encoding Encoding 256 array copy def	0 exch		{		dup type /nametype eq			{			Encoding 2 index 2 index put pop			1 add			}			{			exch pop			} ifelse		} forall	} if popcurrentdict dup end end/FontName get exch definefont pop} def/u{} def/U{} def/q{gsave} def/Q{grestore} def/`{/_i save ddef6 1 roll 4 npopconcatuserdict begin/showpage {} deffalse setoverprintpop} def/~{end_i restore} def/@{} def/&{} def/O{0 ne/_of exch ddef/_lp /none ddef} def/R{0 ne/_os exch ddef/_lp /none ddef} def/g{/_gf exch ddef/_fc{_lp /fill ne	{	_of setoverprint	_gf setgray	/_lp /fill ddef	} if} ddef/_pf{_fcfill} ddef/_psf{_fcexch popashow} ddef/_lp /none ddef} def/G{/_gs exch ddef/_sc{_lp /stroke ne	{	_os setoverprint	_gs setgray	/_lp /stroke ddef	} if} ddef/_ps{_scstroke} ddef/_pss{_scss} ddef/_lp /none ddef} def/k{_cf astore pop/_fc{_lp /fill ne	{	_of setoverprint	_cf aload pop setcmykcolor	/_lp /fill ddef	} if} ddef/_pf{_fcfill} ddef/_psf{_fcexch popashow} ddef/_lp /none ddef} def/K{_cs astore pop/_sc{_lp /stroke ne	{	_os setoverprint	_cs aload pop setcmykcolor	/_lp /stroke ddef	} if} ddef/_ps{_scstroke} ddef/_pss{_scss} ddef/_lp /none ddef} def/x{/_gf exch ddeffindcmykcustomcolor/_if exch ddef/_fc{_lp /fill ne	{	_of setoverprint	_if _gf 1 exch sub setcustomcolor	/_lp /fill ddef	} if} ddef/_pf{_fcfill} ddef/_psf{_fcexch popashow} ddef/_lp /none ddef} def/X{/_gs exch ddeffindcmykcustomcolor/_is exch ddef/_sc{_lp /stroke ne	{	_os setoverprint	_is _gs 1 exch sub setcustomcolor	/_lp /stroke ddef	} if} ddef/_ps{_scstroke} ddef/_pss{_scss} ddef/_lp /none ddef} def/dp{dup null eq{pop_dp 0 ne	{	0 1 _dp 1 sub _dl mod		{		_da exch get 3 get		} for	_dp 1 sub _dl mod 1 add packedarray	_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll	definepattern pop	} if}{_dp 0 ne _dp _dl mod 0 eq and	{	null dp	} if7 packedarray _da exch _dp _dl mod exch put_dp _dl mod _da 0 get 4 get 2 packedarray/_dp _dp 1 add def} ifelse} def/E{_ed begindup 0 get type /arraytype ne	{	0		{		dup 1 add index type /arraytype eq			{			1 add			}			{			exit			} ifelse		} loop	array astore	} if/_dd exch def/_ury exch def/_urx exch def/_lly exch def/_llx exch def/_n exch def/_y 0 def/_dl 4 def/_dp 0 def/_da _dl array def0 1 _dd length 1 sub	{	/_d exch _dd exch get def	0 2 _d length 2 sub		{		/_x exch def		/_c _d _x get _ ne def		/_r _d _x 1 add get cvlit def		_r _ ne			{			_urx _llx sub _ury _lly sub [1 0 0 1 0 0] 				[				/save cvx				_llx neg _lly neg /translate cvx				_c					{					nc /begin cvx					} if				_r dup type /stringtype eq					{					cvx					}					{					{exec} /forall cvx					} ifelse				_c					{					/end cvx					} if				/restore cvx				] cvx			/_fn 12 _n length add string def			_y _fn cvs pop			/_y _y 1 add def			_fn 12 _n putinterval			_fn _c false dp			_d exch _x 1 add exch put			} if		} for	} fornull dp_n _dd /_pdend xput} def/fc{_fm dup concatmatrix pop} def/p{/_fm exch ddef9 -2 roll _pm translate fc7 -2 roll _pm scale fc5 -1 roll _pm rotate fc4 -2 roll exch 0 ne	{	dup _pm rotate fc	1 -1 _pm scale fc	neg _pm rotate fc	}	{	pop	} ifelsedup _pm rotate fcexch dup sin exch cos div 1 0 0 1 0 6 2 roll_pm astore fcneg _pm rotate fc_pd exch get /_fdd exch ddef/_pf{save0 1 _fdd length 1 sub	{	/_fd exch _fdd exch get ddef	_fd	0 2 _fd length 2 sub		{		gsave		2 copy get dup _ ne			{			cvx exec _fc			}			{			pop			} ifelse		2 copy 1 add get dup _ ne			{			aload pop findfont _fm			patternfill			}			{			pop			fill			} ifelse		grestore		pop		} for	pop	} forrestorenewpath} ddef/_psf{save0 1 _fdd length 1 sub	{	/_fd exch _fdd exch get ddef	_fd	0 2 _fd length 2 sub		{		gsave		2 copy get dup _ ne			{			cvx exec _fc			}			{			pop			} ifelse		2 copy 1 add get dup _ ne			{			aload pop findfont _fm			10 copy 6 npop exch pop patternashow			}			{			pop			7 copy 3 npop exch pop ashow			} ifelse		grestore		pop		} for	pop	} forrestore4 npop newpath} ddef/_lp /none ddef} def/sc{_sm dup concatmatrix pop} def/P{/_sm exch ddef9 -2 roll _pm translate sc7 -2 roll _pm scale sc5 -1 roll _pm rotate sc4 -2 roll exch 0 ne	{	dup _pm rotate sc	1 -1 _pm scale sc	neg _pm rotate sc	}	{	pop	} ifelsedup _pm rotate scexch dup sin exch cos div 1 0 0 1 0 6 2 roll_pm astore scneg _pm rotate sc_pd exch get /_sdd exch ddef/_ps{save0 1 _sdd length 1 sub	{	/_sd exch _sdd exch get ddef	_sd	0 2 _sd length 2 sub		{		gsave		2 copy get dup _ ne			{			cvx exec _sc			}			{			pop			} ifelse		2 copy 1 add get dup _ ne			{			aload pop findfont _sm			patternstroke			}			{			pop stroke			} ifelse		grestore		pop		} for	pop	} forrestorenewpath} ddef/_pss{save0 1 _sdd length 1 sub	{	/_sd exch _sdd exch get ddef	_sd	0 2 _sd length 2 sub		{		gsave		2 copy get dup _ ne			{			cvx exec _sc			}			{			pop			} ifelse		2 copy 1 add get dup _ ne			{			aload pop findfont _sm			11 copy 6 npop 3 -1 roll pop patternashowstroke			}			{			pop			8 copy 3 npop ss			} ifelse		grestore		pop		} for	pop	} forrestore5 npop newpath} ddef/_lp /none ddef} def/A{pop} def/nc 3 dict defnc begin/setgray{pop} bind def/setcmykcolor{4 npop} bind def/setcustomcolor{2 npop} bind defcurrentdict readonly pop endcurrentdict readonly pop endsetpacking%%EndProcSet%%EndProlog%%BeginSetupAdobe_cmykcolor /initialize get execAdobe_cshow /initialize get execAdobe_customcolor /initialize get execAdobe_pattern /initialize get execAdobe_Illustrator88 /initialize get exec%%EndSetup0 A0 O0 R0 g0 G0 i 0 J 0 j 1 w 4 M [] 0 d1969.712 2997.303 m1969.712 2917.807 1905.268 2853.363 1825.771 2853.363 c1746.275 2853.363 1681.831 2917.807 1681.831 2997.303 c1681.831 3076.799 1746.275 3141.244 1825.771 3141.244 c1905.268 3141.244 1969.712 3076.799 1969.712 2997.303 c1 g F1969.712 2997.303 m1969.712 2917.807 1905.268 2853.363 1825.771 2853.363 c1746.275 2853.363 1681.831 2917.807 1681.831 2997.303 c1681.831 3076.799 1746.275 3141.244 1825.771 3141.244 c1905.268 3141.244 1969.712 3076.799 1969.712 2997.303 c[] 0 d 1 j 1 J0.144 w 0 G S1969.712 162.686 m1969.712 83.136 1905.268 18.648 1825.771 18.648 c1746.275 18.648 1681.831 83.136 1681.831 162.686 c1681.831 242.236 1746.275 306.723 1825.771 306.723 c1905.268 306.723 1969.712 242.236 1969.712 162.686 c1 g F1969.712 162.686 m1969.712 83.136 1905.268 18.648 1825.771 18.648 c1746.275 18.648 1681.831 83.136 1681.831 162.686 c1681.831 242.236 1746.275 306.723 1825.771 306.723 c1905.268 306.723 1969.712 242.236 1969.712 162.686 c[] 0 d 1 j 1 J0.144 w 0 G S1861.708 162.589  m1861.708 2997.303  l1789.835 2997.303  l1789.835 162.589  l1861.708 162.589  l1 g F1861.708 162.589  m1861.708 2997.303  l1789.835 2997.303  l1789.835 162.589  l1861.708 162.589  l[] 0 d 1 j 1 J0.144 w 0 G S1870.838 2997.303 m1870.838 2972.414 1850.661 2952.237 1825.771 2952.237 c1800.882 2952.237 1780.705 2972.414 1780.705 2997.303 c1780.705 3022.193 1800.882 3042.37 1825.771 3042.37 c1850.661 3042.37 1870.838 3022.193 1870.838 2997.303 c1 g F1870.838 2997.303 m1870.838 2972.414 1850.661 2952.237 1825.771 2952.237 c1800.882 2952.237 1780.705 2972.414 1780.705 2997.303 c1780.705 3022.193 1800.882 3042.37 1825.771 3042.37 c1850.661 3042.37 1870.838 3022.193 1870.838 2997.303 c[] 0 d 1 j 1 J0.144 w 0 G S1870.838 162.686 m1870.838 137.85 1850.661 117.717 1825.771 117.717 c1800.882 117.717 1780.705 137.85 1780.705 162.686 c1780.705 187.522 1800.882 207.655 1825.771 207.655 c1850.661 207.655 1870.838 187.522 1870.838 162.686 c1 g F1870.838 162.686 m1870.838 137.85 1850.661 117.717 1825.771 117.717 c1800.882 117.717 1780.705 137.85 1780.705 162.686 c1780.705 187.522 1800.882 207.655 1825.771 207.655 c1850.661 207.655 1870.838 187.522 1870.838 162.686 c[] 0 d 1 j 1 J0.144 w 0 G S1969.129 2982.734  m1921.505 2515.427 1897.709 2045.99 1897.839 1576.352 c1897.839 1576.352  L1897.968 1106.715 1921.894 637.278 1969.518 169.97 c1969.518 169.97  L[] 0 d 1 j 1 J0.144 w 0 G S1682.025 169.97  m1729.778 637.278 1753.704 1106.715 1753.704 1576.352 c1753.704 1576.352  L1753.834 2045.99 1730.102 2515.427 1682.608 2982.734 c1682.608 2982.734  L[] 0 d 1 j 1 J0.144 w 0 G S1682.025 3004.685  m1633.884 2531.295 1609.764 2055.763 1609.764 1580.043 c1609.764 1580.043  L1609.764 1104.194 1633.884 628.662 1682.025 155.401 c1682.025 155.401  L[] 0 d 1 j 1 J0.144 w 0 G S1969.518 169.97  m2017.659 640.902 2041.779 1113.97 2041.779 1587.23 c2041.779 1587.23  L2041.779 2060.621 2017.724 2533.753 1969.712 3004.685 c1969.712 3004.685  L[] 0 d 1 j 1 J0.144 w 0 G S705.328 18.648  m705.328 117.717  L701.249 117.911  L697.169 118.494  L693.09 119.465  L689.205 120.63  L685.32 122.379  L681.629 124.321  L678.327 126.652  L672.111 132.285  L669.391 135.588  L667.06 138.89  L665.118 142.581  L663.369 146.272  L662.01 150.351  L661.038 154.236  L660.456 158.509  L660.261 162.589  L660.456 166.668  L661.038 170.747  L662.01 174.827  L663.369 178.712  L664.923 182.597  L667.06 186.287  L669.391 189.59  L669.391 189.59  L669.391 189.59  L672.694 193.669  L676.579 197.165  L680.658 200.273  L685.126 202.993  L689.982 204.936  L695.032 206.49  L700.083 207.461  L705.328 207.461  L705.328 2952.625  L700.083 2952.625  L695.032 2953.597  L689.982 2954.956  L685.126 2957.093  L680.658 2959.618  L676.579 2962.727  L672.694 2966.417  L669.391 2970.302  L667.06 2973.799  L664.923 2977.295  L663.369 2981.18  L662.01 2985.065  L661.038 2989.145  L660.456 2993.224  L660.261 2997.498  L660.456 3001.577  L661.038 3005.656  L662.01 3009.735  L663.369 3013.62  L665.118 3017.505  L667.06 3021.002  L669.391 3024.499  L672.111 3027.607  L678.327 3033.24  L681.629 3035.571  L685.32 3037.708  L689.205 3039.262  L693.09 3040.621  L697.169 3041.593  L701.249 3042.175  L705.328 3042.37  L705.328 3141.244  L695.227 3141.05  L685.32 3139.884  L675.413 3138.136  L665.7 3135.805  L656.182 3132.697  L646.858 3129.006  L637.922 3124.538  L620.828 3113.854  L612.864 3107.833  L605.482 3101.034  L598.489 3093.846  L592.079 3086.076  L586.057 3078.112  L580.813 3069.565  L575.956 3060.629  L571.877 3051.5  L568.575 3042.175  L565.661 3032.463  L563.524 3022.75  L562.164 3012.843  L561.387 3002.742  L561.387 2992.641  L562.164 2982.734  L570.711 2895.515  L578.676 2808.296  L586.252 2721.077  L593.245 2633.664  L599.461 2546.445  L605.288 2459.032  L610.727 2371.619  L615.389 2284.011  L619.663 2196.598  L623.159 2108.99  L626.267 2021.577  L628.793 1933.97  L630.735 1846.362  L632.095 1758.755  L633.066 1671.147  L633.26 1583.54  L633.066 1495.932  L632.289 1408.325  L630.929 1320.911  L628.987 1233.304  L626.656 1145.696  L623.548 1058.089  L620.051 970.676  L615.778 883.068  L611.116 795.655  L605.871 708.242  L600.238 620.828  L593.827 533.415  L587.029 446.196  L579.453 358.783  L571.488 271.564  L562.941 184.345  L561.582 169.97  L561.387 160.258  L561.387 160.258  L561.776 150.545  L562.941 140.832  L564.884 131.314  L567.215 121.99  L570.323 112.666  L574.014 103.73  L578.287 94.989  L583.144 86.442  L588.583 78.478  L594.41 70.708  L601.015 63.52  L607.813 56.721  L615.195 50.311  L623.159 44.484  L639.671 34.383  L648.606 30.303  L657.542 26.807  L666.866 23.893  L676.384 21.562  L685.903 20.008  L695.615 19.037  L1 g F849.268 160.258  m849.268 160.258  L849.074 169.97  L849.074 169.97  L847.714 184.345  L839.167 271.564  L831.203 358.783  L823.627 446.196  L816.828 533.415  L810.418 620.828  L804.785 708.242  L799.54 795.655  L794.878 883.068  L790.799 970.676  L787.108 1058.089  L784.194 1145.696  L781.669 1233.304  L779.726 1320.911  L778.366 1408.325  L777.589 1495.932  L777.395 1583.54  L777.589 1671.147  L778.561 1758.755  L779.92 1846.362  L781.863 1933.97  L784.388 2021.577  L787.496 2108.99  L791.187 2196.598  L795.266 2284.011  L799.928 2371.619  L805.367 2459.032  L811.195 2546.445  L817.605 2633.664  L824.404 2721.077  L831.98 2808.296  L839.944 2895.515  L848.686 2982.734  L849.268 2992.641  L849.268 3002.742  L848.491 3012.843  L847.132 3022.75  L844.995 3032.463  L842.275 3042.175  L838.779 3051.5  L834.699 3060.629  L829.843 3069.565  L824.598 3078.112  L818.577 3086.076  L812.166 3093.846  L805.173 3101.034  L797.792 3107.833  L789.827 3113.854  L772.733 3124.538  L763.798 3129.006  L754.473 3132.697  L744.955 3135.805  L735.243 3138.136  L725.336 3139.884  L715.429 3141.05  L705.328 3141.244  L705.328 3042.37  L709.407 3042.175  L713.681 3041.593  L717.566 3040.621  L721.645 3039.262  L725.336 3037.708  L729.027 3035.571  L732.329 3033.24  L738.545 3027.607  L741.264 3024.499  L743.595 3021.002  L745.538 3017.505  L747.286 3013.62  L748.646 3009.735  L749.617 3005.656  L750.2 3001.577  L750.394 2997.498  L750.2 2993.224  L749.617 2989.145  L748.646 2985.065  L747.286 2981.18  L745.732 2977.295  L743.595 2973.799  L741.264 2970.302  L741.264 2970.302  L741.264 2970.302  L737.962 2966.417  L734.271 2962.727  L729.998 2959.618  L725.53 2957.093  L720.674 2954.956  L715.623 2953.597  L710.573 2952.625  L705.328 2952.625  L705.328 207.461  L710.573 207.461  L715.623 206.49  L720.674 204.936  L725.53 202.993  L729.998 200.273  L734.271 197.165  L737.962 193.669  L741.264 189.59  L743.595 186.287  L745.732 182.597  L747.286 178.712  L748.646 174.827  L749.617 170.747  L750.2 166.668  L750.394 162.589  L750.2 158.509  L749.617 154.236  L748.646 150.351  L747.286 146.272  L745.538 142.581  L743.595 138.89  L741.264 135.588  L738.545 132.285  L732.329 126.652  L729.027 124.321  L725.336 122.379  L721.645 120.63  L717.566 119.465  L713.681 118.494  L709.407 117.911  L705.328 117.717  L705.328 18.648  L715.04 19.037  L724.753 20.008  L734.271 21.562  L743.79 23.893  L753.114 26.807  L762.049 30.303  L770.985 34.383  L787.691 44.484  L795.461 50.311  L802.842 56.721  L809.641 63.52  L816.246 70.708  L822.073 78.478  L827.512 86.442  L832.368 94.989  L836.642 103.73  L840.333 112.666  L843.441 121.99  L845.966 131.314  L847.714 140.832  L848.88 150.545  L1 g F849.074 169.97  m849.848 156.947 848.803 143.951 845.966 131.314 c843.129 118.678 838.558 106.465 832.368 94.989 c826.308 83.513 818.667 72.933 809.641 63.52 c800.744 54.107 790.621 45.944 779.532 39.239 c768.314 32.534 756.297 27.374 743.79 23.893 c731.282 20.411 718.351 18.648 705.328 18.648 c692.304 18.648 679.374 20.411 666.866 23.893 c654.358 27.374 642.407 32.534 631.318 39.239 c620.1 45.944 609.912 54.107 601.015 63.52 c591.989 72.933 584.348 83.513 578.287 94.989 c572.098 106.465 567.592 118.678 564.884 131.314 c562.047 143.951 560.937 156.947 561.582 169.97 c561.582 169.97  L562.941 184.345  L586.507 416.76 604.125 649.747 615.778 883.068 c627.56 1116.389 633.39 1349.96 633.26 1583.54 c633.26 1817.12 627.301 2050.69 615.389 2284.011 c603.477 2517.332 585.73 2750.32 562.164 2982.734 c562.164 2982.734  L560.747 2996.008 561.204 3009.477 563.524 3022.75 c565.973 3035.895 570.157 3048.645 575.956 3060.629 c581.884 3072.743 589.469 3083.924 598.489 3093.846 c607.51 3103.769 617.841 3112.4 629.181 3119.488 c640.522 3126.575 652.814 3132.068 665.7 3135.805 c678.587 3139.413 691.926 3141.244 705.328 3141.244 c718.73 3141.244 732.068 3139.413 744.955 3135.805 c757.842 3132.068 770.134 3126.575 781.474 3119.488 c792.815 3112.4 803.145 3103.769 812.166 3093.846 c821.187 3083.924 828.772 3072.743 834.699 3060.629 c840.498 3048.645 844.683 3035.895 847.132 3022.75 c849.451 3009.477 849.974 2996.008 848.686 2982.734 c848.686 2982.734  L824.991 2750.32 807.178 2517.332 795.266 2284.011 c783.354 2050.69 777.395 1817.12 777.395 1583.54 c777.266 1349.96 783.095 1116.389 794.878 883.068 c806.531 649.747 824.149 416.76 847.714 184.345 c847.714 184.345  L849.074 169.97  L[] 0 d 1 j 1 J0.144 w 0 G S741.264 2970.302  m744.603 2974.797 747.105 2979.801 748.646 2985.065 c750.187 2990.459 750.714 2996.055 750.2 3001.577 c749.686 3007.098 748.106 3012.498 745.538 3017.505 c743.098 3022.385 739.74 3026.797 735.631 3030.52 c731.522 3034.373 726.781 3037.336 721.645 3039.262 c716.38 3041.316 710.849 3042.37 705.328 3042.37 c699.806 3042.37 694.341 3041.316 689.205 3039.262 c683.94 3037.336 679.134 3034.373 675.025 3030.52 c670.916 3026.797 667.557 3022.385 665.118 3017.505 c662.678 3012.498 661.098 3007.098 660.456 3001.577 c659.942 2996.055 660.469 2990.459 662.01 2985.065 c663.551 2979.801 666.053 2974.797 669.391 2970.302 c669.391 2970.302  L671.457 2967.463 673.868 2964.921 676.579 2962.727 c679.16 2960.532 682.028 2958.642 685.126 2957.093 c688.353 2955.544 691.676 2954.371 695.032 2953.597 c698.389 2952.693 701.843 2952.237 705.328 2952.237 c708.813 2952.237 712.267 2952.693 715.623 2953.597 c719.108 2954.371 722.432 2955.544 725.53 2957.093 c728.628 2958.642 731.561 2960.532 734.271 2962.727 c736.853 2964.921 739.199 2967.463 741.264 2970.302 c741.264 2970.302  L[] 0 d 1 j 1 J0.144 w 0 G S669.391 189.59  m666.053 185.224 663.551 180.22 662.01 174.827 c660.469 169.562 659.942 164.031 660.456 158.509 c661.098 152.859 662.678 147.46 665.118 142.581 c667.557 137.573 670.916 133.095 675.025 129.372 c679.134 125.648 683.94 122.685 689.205 120.63 c694.341 118.704 699.806 117.717 705.328 117.717 c710.849 117.717 716.38 118.704 721.645 120.63 c726.781 122.685 731.522 125.648 735.631 129.372 c739.74 133.095 743.098 137.573 745.538 142.581 c748.106 147.46 749.686 152.859 750.2 158.509 c750.714 164.031 750.187 169.562 748.646 174.827 c747.105 180.22 744.603 185.224 741.264 189.59 c741.264 189.59  L739.199 192.429 736.853 194.971 734.271 197.165 c731.561 199.489 728.628 201.444 725.53 202.993 c722.432 204.542 719.108 205.715 715.623 206.49 c712.267 207.264 708.813 207.655 705.328 207.655 c701.843 207.655 698.389 207.264 695.032 206.49 c691.676 205.715 688.353 204.542 685.126 202.993 c682.028 201.444 679.16 199.489 676.579 197.165 c673.868 194.971 671.457 192.429 669.391 189.59 c669.391 189.59  L[] 0 d 1 j 1 J0.144 w 0 G S236.404 20.979  m236.404 120.048  L232.325 120.048  L228.246 120.63  L224.166 121.602  L220.281 122.961  L216.591 124.515  L212.9 126.652  L209.403 128.983  L203.382 134.422  L200.662 137.724  L198.331 141.027  L196.194 144.717  L194.64 148.603  L193.28 152.488  L192.309 156.567  L191.726 160.646  L191.532 164.725  L191.726 168.805  L192.309 173.078  L193.28 176.963  L194.446 181.043  L196.194 184.733  L198.137 188.424  L200.468 191.921  L200.468 191.921  L200.468 191.921  L203.964 195.806  L207.655 199.302  L211.929 202.41  L216.396 205.13  L221.253 207.072  L226.109 208.626  L231.354 209.598  L236.404 209.598  L236.404 2954.762  L231.354 2954.762  L226.109 2955.733  L221.253 2957.093  L216.396 2959.23  L211.929 2961.755  L207.655 2964.863  L203.964 2968.554  L200.468 2972.439  L198.137 2975.936  L196.194 2979.626  L194.446 2983.317  L193.28 2987.396  L192.309 2991.282  L191.726 2995.361  L191.532 2999.634  L191.726 3003.714  L192.309 3007.793  L193.28 3011.872  L194.64 3015.757  L196.194 3019.642  L198.331 3023.333  L200.662 3026.635  L203.382 3029.938  L209.403 3035.377  L212.9 3037.708  L216.591 3039.844  L220.281 3041.398  L224.166 3042.758  L228.246 3043.729  L232.325 3044.312  L236.404 3044.506  L236.404 3143.381  L229.605 3143.381  L222.807 3142.798  L216.008 3142.021  L209.403 3140.855  L202.604 3139.496  L196 3137.747  L189.59 3135.611  L183.179 3133.279  L176.769 3130.56  L170.747 3127.646  L164.725 3124.344  L158.898 3120.653  L153.07 3116.962  L147.631 3112.883  L142.386 3108.415  L137.336 3103.947  L132.48 3099.091  L127.818 3094.041  L123.544 3088.796  L119.465 3083.163  L115.58 3077.529  L111.889 3071.702  L108.587 3065.68  L105.673 3059.658  L102.953 3053.248  L100.622 3046.837  L98.486 3040.427  L96.737 3033.823  L95.183 3027.218  L94.018 3020.419  L93.241 3013.62  L92.658 3006.822  L83.917 2918.049  L75.758 2829.276  L68.182 2740.308  L61.189 2651.341  L54.585 2562.568  L48.757 2473.407  L43.318 2384.439  L38.656 2295.472  L34.383 2206.311  L30.692 2117.149  L27.584 2027.987  L25.058 1938.826  L23.116 1849.664  L21.562 1760.503  L20.785 1671.341  L20.591 1582.18  L20.591 1582.18  L20.785 1493.018  L21.562 1403.857  L23.116 1314.695  L25.058 1225.534  L27.584 1136.372  L30.692 1047.211  L34.383 958.049  L38.656 868.888  L43.318 779.92  L48.757 690.953  L54.585 601.792  L61.189 512.824  L68.182 424.051  L75.758 335.084  L83.917 246.311  L92.658 157.538  L93.435 148.214  L94.989 138.89  L96.932 129.566  L99.457 120.63  L102.759 111.695  L106.45 103.148  L110.723 94.795  L115.58 86.636  L121.019 78.866  L126.846 71.485  L133.257 64.492  L140.055 58.081  L147.243 51.865  L154.819 46.232  L162.783 41.181  L179.489 32.634  L188.23 29.138  L197.165 26.224  L206.295 24.087  L215.619 22.339  L224.943 21.368  L234.462 20.785  L1 g F452.606 1589.561  m452.606 1589.561  L452.218 1678.14  L451.441 1766.913  L450.081 1855.686  L447.944 1944.459  L445.419 2033.038  L442.311 2121.811  L438.62 2210.39  L434.541 2298.969  L429.685 2387.742  L424.246 2476.32  L418.418 2564.705  L412.008 2653.284  L404.82 2741.668  L397.245 2830.053  L389.086 2918.437  L380.345 3006.822  L380.345 3006.822  L380.345 3006.822  L379.762 3013.62  L378.985 3020.419  L377.82 3027.218  L376.46 3033.823  L374.517 3040.427  L372.575 3046.837  L370.049 3053.248  L367.33 3059.658  L364.416 3065.68  L361.114 3071.702  L357.423 3077.529  L353.732 3083.163  L349.653 3088.796  L345.185 3094.041  L340.523 3099.091  L335.667 3103.947  L330.616 3108.415  L325.372 3112.883  L319.933 3116.962  L314.299 3120.653  L308.472 3124.344  L302.45 3127.646  L296.234 3130.56  L290.018 3133.279  L283.607 3135.611  L277.003 3137.747  L270.398 3139.496  L263.794 3140.855  L256.995 3142.021  L250.196 3142.798  L243.397 3143.381  L236.404 3143.381  L236.404 3044.506  L236.599 3044.506  L240.678 3044.312  L244.757 3043.729  L248.836 3042.758  L252.721 3041.398  L256.606 3039.844  L260.103 3037.708  L263.6 3035.377  L269.816 3029.938  L272.341 3026.635  L274.672 3023.333  L276.809 3019.642  L278.557 3015.757  L279.722 3011.872  L280.694 3007.793  L281.276 3003.714  L281.471 2999.634  L281.276 2995.361  L280.694 2991.282  L279.917 2987.396  L278.557 2983.317  L276.809 2979.626  L274.866 2975.936  L272.535 2972.439  L272.535 2972.439  L272.535 2972.439  L269.233 2968.554  L265.348 2964.863  L261.269 2961.755  L256.606 2959.23  L251.944 2957.093  L246.894 2955.733  L241.649 2954.762  L236.404 2954.762  L236.404 209.598  L241.649 209.598  L246.894 208.626  L251.944 207.072  L256.606 205.13  L261.269 202.41  L265.348 199.302  L269.233 195.806  L272.535 191.921  L274.866 188.424  L276.809 184.733  L278.557 181.043  L279.917 176.963  L280.694 173.078  L281.276 168.805  L281.471 164.725  L281.276 160.646  L280.694 156.567  L279.722 152.488  L278.557 148.603  L276.809 144.717  L274.672 141.027  L272.341 137.724  L269.816 134.422  L263.6 128.983  L260.103 126.652  L256.606 124.515  L252.721 122.961  L248.836 121.602  L244.757 120.63  L240.678 120.048  L236.599 119.853  L236.404 120.048  L236.404 20.979  L243.786 20.979  L253.304 21.756  L262.628 23.31  L271.758 25.253  L280.888 27.778  L289.629 31.08  L298.371 34.771  L306.723 39.045  L322.458 49.34  L329.839 55.167  L336.832 61.578  L343.437 68.377  L349.459 75.564  L355.092 83.14  L360.143 91.104  L364.805 99.263  L368.69 107.81  L372.186 116.551  L375.1 125.487  L377.431 134.616  L378.985 143.94  L380.151 153.265  L380.539 162.783  L380.345 172.107  L389.086 260.491  L397.245 348.876  L404.82 437.261  L411.814 525.645  L418.418 614.224  L424.246 702.803  L429.685 791.381  L434.541 879.96  L438.62 968.539  L442.311 1057.118  L445.419 1145.891  L447.944 1234.664  L450.081 1323.242  L451.441 1412.015  L452.218 1500.788  L1 g F380.345 3006.822  m404.428 2771.429 422.499 2535.397 434.541 2298.969 c446.583 2062.67 452.606 1826.119 452.606 1589.561 c452.606 1352.874 446.583 1116.259 434.541 879.96 c422.499 643.532 404.428 407.5 380.345 172.107 c380.345 172.107  L380.99 159.599 380.01 146.995 377.431 134.616 c374.723 122.367 370.478 110.481 364.805 99.263 c359.002 88.044 351.818 77.661 343.437 68.377 c334.927 58.964 325.261 50.735 314.688 43.901 c304.114 37.067 292.751 31.646 280.888 27.778 c268.896 23.91 256.422 21.624 243.786 20.979 c231.278 20.334 218.674 21.379 206.295 24.087 c194.046 26.666 182.16 30.911 170.941 36.714 c159.723 42.387 149.339 49.571 140.055 58.081 c130.642 66.463 122.414 76.063 115.58 86.636 c108.746 97.21 103.325 108.638 99.457 120.63 c95.589 132.622 93.303 145.03 92.658 157.538 c92.658 157.538  L68.704 394.226 50.698 631.423 38.656 868.888 c26.615 1106.482 20.591 1344.327 20.591 1582.18 c20.591 1820.033 26.615 2057.878 38.656 2295.472 c50.698 2532.936 68.704 2770.134 92.658 3006.822 c92.658 3006.822  L93.684 3025.04 98.103 3042.979 105.673 3059.658 c113.371 3076.209 124.121 3091.246 137.336 3103.947 c150.551 3116.521 166.115 3126.48 183.179 3133.279 c200.115 3140.079 218.252 3143.575 236.599 3143.575 c254.817 3143.575 272.954 3140.079 290.018 3133.279 c306.953 3126.48 322.452 3116.521 335.667 3103.947 c349.01 3091.246 359.76 3076.209 367.33 3059.658 c375.028 3042.979 379.447 3025.04 380.345 3006.822 c380.345 3006.822  L[] 0 d 1 j 1 J0.144 w 0 G S200.468 191.921  m197.129 187.426 194.693 182.356 193.28 176.963 c191.74 171.699 191.213 166.168 191.726 160.646 c192.24 155.125 193.754 149.725 196.194 144.717 c198.762 139.71 202.186 135.232 206.295 131.508 c210.404 127.785 215.145 124.887 220.281 122.961 c225.418 120.907 230.949 119.853 236.599 119.853 c242.12 119.853 247.585 120.907 252.721 122.961 c257.986 124.887 262.793 127.785 266.902 131.508 c271.011 135.232 274.369 139.71 276.809 144.717 c279.248 149.725 280.763 155.125 281.276 160.646 c281.79 166.168 281.329 171.699 279.917 176.963 c278.376 182.356 275.874 187.426 272.535 191.921 c272.535 191.921  L270.47 194.631 268.059 197.108 265.348 199.302 c262.637 201.626 259.704 203.581 256.606 205.13 c253.508 206.679 250.25 207.852 246.894 208.626 c243.538 209.401 240.084 209.792 236.599 209.792 c233.113 209.792 229.594 209.401 226.109 208.626 c222.753 207.852 219.494 206.679 216.396 205.13 c213.298 203.581 210.366 201.626 207.655 199.302 c204.944 197.108 202.533 194.631 200.468 191.921 c200.468 191.921  L[] 0 d 1 j 1 J0.144 w 0 G S272.535 2972.439  m275.874 2976.933 278.376 2982.003 279.917 2987.396 c281.329 2992.661 281.79 2998.192 281.276 3003.714 c280.763 3009.235 279.248 3014.634 276.809 3019.642 c274.369 3024.65 271.011 3029.128 266.902 3032.851 c262.793 3036.575 257.986 3039.472 252.721 3041.398 c247.585 3043.453 242.12 3044.506 236.599 3044.506 c230.949 3044.506 225.418 3043.453 220.281 3041.398 c215.145 3039.472 210.404 3036.575 206.295 3032.851 c202.186 3029.128 198.762 3024.65 196.194 3019.642 c193.754 3014.634 192.24 3009.235 191.726 3003.714 c191.213 2998.192 191.74 2992.661 193.28 2987.396 c194.693 2982.003 197.129 2976.933 200.468 2972.439 c200.468 2972.439  L202.533 2969.728 204.944 2967.187 207.655 2964.863 c210.366 2962.669 213.298 2960.779 216.396 2959.23 c219.494 2957.681 222.753 2956.508 226.109 2955.733 c229.594 2954.959 233.113 2954.568 236.599 2954.568 c240.084 2954.568 243.538 2954.959 246.894 2955.733 c250.25 2956.508 253.508 2957.681 256.606 2959.23 c259.704 2960.779 262.637 2962.669 265.348 2964.863 c268.059 2967.187 270.47 2969.728 272.535 2972.439 c272.535 2972.439  L[] 0 d 1 j 1 J0.144 w 0 G S%%TrailerAdobe_Illustrator88 /terminate get execAdobe_pattern /terminate get execAdobe_customcolor /terminate get execAdobe_cshow /terminate get execAdobe_cmykcolor /terminate get execAdobe_packedarray /terminate get exec%%EOF